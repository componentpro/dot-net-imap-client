<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentPro.Network</name>
    </assembly>
    <members>
        <member name="T:ComponentPro.Net.CommandResponseEventHandler">
            <summary>
            Represents the method that will handle the <b>CommandResponse</b> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.CommandResponseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.CommandResponseEventArgs">
            <summary>
            Provides data for the <b>CommandResponse</b> event.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.CommandResponseEventArgs.Command">
            <summary>
            Gets the command string, or a null reference when a response has been received.
            </summary>
            <value>The command string.</value>
        </member>
        <member name="P:ComponentPro.Net.CommandResponseEventArgs.Response">
            <summary>
            Gets the server's response, or a null reference when a command has been sent.
            </summary>
            <value>The server's response.</value>
        </member>
        <member name="T:ComponentPro.Compression.ZlibStream">
            <summary>
            Zlib compression or decompression stream.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the ZlibStream with the specified compression level. This will be a compression stream.
            </summary>
            <param name="inner">The inner stream.</param>
            <param name="compressionLevel">The compression level. From 0 to 9 (Default compression level is 6).</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the ZlibStream. This will be a decompression stream.
            </summary>
            <param name="inner">The inner stream.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek the specified offset and origin. This method is not supported.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">Origin.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.SetLength(System.Int64)">
            <summary>
            Sets the length. This method is not supported.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read the specified buffer, offset and count. This method is not supported in compression mode.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write the specified buffer, offset and count. This method is not supported in decompression mode.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="offset">Offset.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Flush">
            <summary>
            Flush this instance.
            </summary>
        </member>
        <member name="M:ComponentPro.Compression.ZlibStream.Dispose(System.Boolean)">
            <summary>
            Dispose the specified disposing.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CompressedRead">
            <summary>
            Gets the number of compressed bytes read. Available in decompression mode only.
            </summary>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanRead">
            <summary>
            Gets a value indicating whether this instance can read.
            </summary>
            <value><c>true</c> if this instance can read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value><c>true</c> if this instance can seek; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.CanWrite">
            <summary>
            Gets a value indicating whether this instance can write.
            </summary>
            <value><c>true</c> if this instance can write; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.Length">
            <summary>
            Gets the length. This property is not supported.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:ComponentPro.Compression.ZlibStream.Position">
            <summary>
            Gets or sets the position. This property is not supported.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:ComponentPro.Net.SspiAuthenticationMethod">
            <summary>
            Defines SSPI authentication methods used for logging in the user account on the server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.NTLM">
            <summary>
            Secure SASL NTLM authentication (also known as Secure Password Authentication - SPA). 
            In Windows domain environment such as Active Directory, can also be used to authenticate the current Windows user 
            (in this case, the developer should pass a null reference (Nothing in Visual Basic) as user name and password values). 
            Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.Kerberos">
            <summary>
            Secure SASL GSSAPI authentication (Kerberos). 
            Used to authenticate the current Windows user in Windows domain environment such as Active Directory. 
            User name and password values will be ignored and can be left blank or a null reference (Nothing in Visual Basic). 
            Might not be supported by particular server implementations.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SspiAuthenticationMethod.Negotiate">
            <summary>
            Negotiate authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.NetworkExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.NetworkException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.NetworkException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.OperationFailed">
            <summary> 
            The requested operation could not be completed. 
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, a protocol error such as 'file not found' would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.OperationCancelled">
            <summary>
            The operation was aborted by the client.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.NetworkExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.NetworkException">
            <summary>
            The exception that is thrown when an error occurs while using a ComponentPro network component.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.NetworkException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.NetworkException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.NetworkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.Status">
            <summary>
            Gets error status.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.NetworkExceptionStatus"/> values.</value>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.ProtocolCode">
            <summary>
            Gets the protocol error code, if available (usually when <see cref="P:ComponentPro.Net.NetworkException.Status"/> is set to ProtocolError).
            </summary>
            <value>Protocol error code.</value>
        </member>
        <member name="P:ComponentPro.Net.NetworkException.ProtocolMessage">
            <summary>
            Gets the protocol error message, if available (usually when <see cref="P:ComponentPro.Net.NetworkException.Status"/> is set to ProtocolError).
            </summary>
            <value>Protocol error message.</value>
        </member>
        <member name="T:ComponentPro.Net.ProxyHttpConnectAuthMethod">
            <summary>
            HTTP CONNECT proxy server authentication method.
            </summary>
            <seealso cref="T:ComponentPro.Net.ProxyType"/>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Basic">
            <summary>
            Basic authentication.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Ntlm">
            <summary>
            NTLM authentication. This can only be used for <see cref="F:ComponentPro.Net.ProxyType.HttpConnect">HTTP CONNECT proxies</see>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyHttpConnectAuthMethod.Digest">
            <summary>
            Digest authentication. This can only be used for <see cref="F:ComponentPro.Net.ProxyType.HttpConnect">HTTP CONNECT proxies</see>.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxyType">
            <summary>
            Type of proxy to use to connect to the remote machine.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.None">
            <summary>No proxy. Direct connection.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks4">
            <summary>Connection through SOCKS4 proxy. This is a legacy proxy protocol that does not support password authentication.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks4A">
            <summary>Connection through SOCKS4A proxy (capable of resolving domain names). This is a legacy proxy protocol that does not support password authentication.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.Socks5">
            <summary>Connection through SOCKS5 proxy.</summary>
        </member>
        <member name="F:ComponentPro.Net.ProxyType.HttpConnect">
            <summary>Connection through HTTP proxy using the CONNECT method.</summary>
        </member>
        <member name="T:ComponentPro.Net.ProxySocketExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.ProxySocketException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownHost">
            <summary>
            The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error. For example, an FTP protocol error such as 550 Access Denied would use this status.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownProxyHost">
            <summary>
            The name resolver service could not resolve the proxy host name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.ReceiveFailure">
            <summary>
            A complete response was not received from the remote server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="P:ComponentPro.Net.ProxySocketException.Status"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.InvalidResponse">
            <summary>
            The server response was not a valid response.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.AsyncError">
            <summary>
            General exception in asynchronous call.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.NotConnected">
            <summary>
            The socket is not connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.SendRetryTimeout">
            <summary>
            An incomplete block of data was sent and the operation timed out.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.ProxySocketExceptionStatus.Timeout">
            <summary>
            Operation timed out.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxyClient">
            <summary>Provides client connections for TCP network services through HTTP, SOCKS v4, SOCKS v4A and SOCKS v5 proxy servers.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of ProxyClient class with a container.
            </summary>
            <param name="container">The container object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the container is null.</exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(ComponentPro.Net.WebProxyEx)">
            <summary>
            Initializes a new instance of <see cref="T:ComponentPro.Net.ProxyClient"/> class with parameters provided in the supplied <see cref="T:ComponentPro.Net.WebProxyEx"/> object.
            </summary>
            <param name="proxy">Contains parameters used to initialize this <see cref="T:ComponentPro.Net.ProxyClient"/>.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"></see> of the IP protocol. </param>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
            <param name="proxyType">The proxy type.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="userName">The proxy user name.</param>
            <param name="password">The proxy password.</param>
            <param name="domain">The proxy domain name.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.Net.Sockets.AddressFamily,ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class with the specified family.</summary>
            <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"></see> of the IP protocol. </param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="domain">The proxy domain name.</param>
            <param name="password">The proxy password.</param>
            <param name="proxyHost">The proxy host.</param>
            <param name="proxyPort">The proxy port.</param>
            <param name="proxyType">The proxy type.</param>
            <param name="userName">The proxy user name.</param>
            <exception cref="T:System.ArgumentException">family != AddressFamily.InterNetwork -or- family != AddressFamily.InterNetworkV6 </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.#ctor(System.String,System.Int32,ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxyClient"></see> class and connects to the specified port on the specified host.</summary>
            <param name="port">The port number of the remote host to which you intend to connect. </param>
            <param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
            <param name="proxyType">The <see cref="P:ComponentPro.Net.ProxyClient.ProxyType">type</see> of the proxy.</param>
            <param name="authenticationMethod">The authentication method.</param>
            <param name="proxyHost">The hostname of the proxy server.</param>
            <param name="proxyPort">The port of the proxy server.</param>
            <param name="userName">A user name to submit to the proxy server for authentication.</param>
            <param name="password">A password to submit to the proxy server for authentication.</param>
            <param name="domain">A domain to submit to the proxy server for authentication.</param>
            <exception cref="T:System.ArgumentNullException">hostname is null.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Close">
            <summary>Disposes this <see cref="T:ComponentPro.Net.ProxyClient"></see> instance without closing the underlying connection.</summary>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.Net.IPEndPoint)">
            <summary>Connects the client to a remote TCP host using the specified remote network endpoint.</summary>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">remoteEp is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>Connects the client to a remote TCP host using the specified IP address and port number.</summary>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the host to which you intend to connect. </param>
            <param name="port">The port number to which you intend to connect. </param>
            <exception cref="T:System.ArgumentNullException">address parameter is null. </exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Connect(System.String,System.Int32)">
            <summary>Connects the client to the specified port on the specified host.</summary>
            <exception cref="T:System.ArgumentNullException">hostname is null. </exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">port is not between <see cref="F:System.Net.IPEndPoint.MinPort"></see> and <see cref="F:System.Net.IPEndPoint.MaxPort"></see>. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:ComponentPro.Net.ProxyClient"></see> is closed. </exception>
            <param name="hostname">The DNS name of the remote host to which you intend to connect. </param>
            <param name="port">The port number of the remote host to which you intend to connect. </param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Disconnect">
            <summary>
            Informs the proxy server that the connection is about to close and terminates the connection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:ComponentPro.Net.ProxyClient"></see> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.Finalize">
            <summary>Frees resources used by the <see cref="T:ComponentPro.Net.ProxyClient"></see> class.</summary>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.GetStream">
            <summary>Returns the <see cref="T:System.Net.Sockets.NetworkStream"></see> used to send and receive data.</summary>
            <returns>The underlying <see cref="T:System.Net.Sockets.NetworkStream"></see>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> is not connected to a remote host. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:ComponentPro.Net.ProxyClient"></see> has been closed. </exception>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.OnConnectCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.ProxyClient.ConnectCompleted"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">The <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPAddress,System.Int32)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"></see> and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="address">The <see cref="T:System.Net.IPAddress"></see> of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <exception cref="T:System.ArgumentNullException">The address parameter is null. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete.</param>
            <param name="host">The name of the remote host.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <param name="host">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.String,System.Int32)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <param name="host">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <param name="callback">An <see cref="T:System.ComponentModel.AsyncCompletedEventHandler"></see> delegate that references the method to invoke when the operation is complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint,System.Object)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <param name="userToken">A user-defined object that contains information about the connect operation. This object is passed to the callback delegate when the operation is complete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:ComponentPro.Net.ProxyClient.ConnectAsync(System.Net.IPEndPoint)">
            <summary>Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<see cref="T:System.String"></see>) and a port number (<see cref="T:System.Int32"></see>).</summary>
            <returns>An object that references the asynchronous connection.</returns>
            <param name="remoteEndPoint">The <see cref="T:System.Net.IPEndPoint"></see> to which you intend to connect. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The port number is not valid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ArgumentNullException">The host parameter is null. </exception>
            <exception cref="T:System.Security.SecurityException">A caller higher in the call stack does not have permission for the requested operation. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Net.SocketPermission, System, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="E:ComponentPro.Net.ProxyClient.ConnectCompleted">
            <summary>
            Occurs when an asynchronous <see cref="O:ConnectAsync"/> operation completes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Active">
            <summary>Gets or set a value that indicates whether a connection has been made.</summary>
            <returns>true if the connection has been made; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Available">
            <summary>Gets the amount of data that has been received from the network and is available to be read.</summary>
            <returns>The number of bytes of data received from the network and available to be read.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when attempting to access the socket. See the Remarks section for more information. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.Sockets.Socket"></see> has been closed. </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, ProtocolVersion=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ClientSocket">
            <summary>Gets the underlying <see cref="T:System.Net.Sockets.Socket"></see>.</summary>
            <returns>The underlying network <see cref="T:System.Net.Sockets.Socket"></see>.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Connected">
            <summary>Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket"></see> for a <see cref="T:ComponentPro.Net.ProxyClient"></see> is connected to a remote host.</summary>
            <returns>true if the <see cref="P:ComponentPro.Net.ProxyClient.ClientSocket"></see> socket was connected to a remote resource as of the most recent operation; otherwise, false.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out which is default).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is -1 (infinite).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server.
            </p>
            <p>
            The <see cref="P:ComponentPro.Net.ProxyClient.Timeout"/> property only affects synchronous methods.
            </p>
            <p>
            Minimal value is 500. Setting this to a value lower than 500 will set it to 500.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Family">
            <summary>
            Gets or sets the addressing scheme that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyType">
            <summary>
            Gets or sets the proxy type.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyHost">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.ProxyPort">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.UserName">
            <summary>
            Gets or sets the user name to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Password">
            <summary>
            Gets or sets password to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ProxyClient.Domain">
            <summary>
            Gets or sets the domain to submit to the proxy server for authentication.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ProxySocketException">
            <summary>
            The exception that is thrown when a proxy error or socket error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.String,ComponentPro.Net.ProxySocketExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException"/> class with the specified error message and status.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus"/> values.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.String,ComponentPro.Net.ProxySocketExceptionStatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException"/> class with the specified error message, status,
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus"/> values.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <i>innerException</i> parameter is not a null reference, the current exception is raised in a <b>catch</b> block that handles the inner exception.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.#ctor(System.Net.Sockets.SocketException)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.ProxySocketException"/> class with the reference to the socket exception that is the cause of this exception.
            </summary>
            <param name="e">The socket exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ComponentPro.Net.ProxySocketException.GetSocketExceptionMessage(System.Net.Sockets.SocketException)">
            <summary>
            Returns an exception message for the supplied SocketException.
            </summary>
            <param name="error">Socket exception.</param>
            <returns>Exception message.</returns>
        </member>
        <member name="P:ComponentPro.Net.ProxySocketException.Status">
            <summary>
            Gets the status of the error.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus"/> values.</value> 
        </member>
        <member name="P:ComponentPro.Net.ProxySocketException.ErrorCode">
            <summary>
            Gets the error code associated with this exception if the error status is <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus">SocketError</see> or <see cref="T:ComponentPro.Net.ProxySocketExceptionStatus">ProtocolError</see>. Returns 0 otherwise.
            </summary>
            <value>An integer error code associated with this exception (or 0).</value>
        </member>
        <member name="T:ComponentPro.Net.PortRange">
            <summary>
            Represents a TCP/IP port range.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.PortRange.Any">
            <summary>
            Specifies a port range that makes the OS assign an available port number. 
            </summary>
        </member>
        <member name="M:ComponentPro.Net.PortRange.#ctor(System.Int32)">
            <summary>
            Creates a port range that includes a single port.
            </summary>
            <param name="port">Port</param>
        </member>
        <member name="M:ComponentPro.Net.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a port range.
            </summary>
            <param name="portMin">Low bound of the range.</param>
            <param name="portMax">High boung of the range.</param>
        </member>
        <member name="M:ComponentPro.Net.PortRange.ToString">
            <summary>
            Returns the string representation of the port range.
            </summary>
            <returns>Port range.</returns>
        </member>
        <member name="T:ComponentPro.Net.WebProxyEx">
            <summary>
            Contains proxy settings for a socket connection.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.ToString">
            <summary>
            Returns a string representation of this proxy.
            </summary>
            <returns>String representation of this proxy.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.Clone">
            <summary>
            Creates a copy of the <see cref="T:ComponentPro.Net.WebProxyEx"/> instance.
            </summary>
            <returns>A new <see cref="T:ComponentPro.Net.WebProxyEx"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.GetProxy(System.Uri)">
            <summary>
            Returns the proxied URI for a destination.
            </summary>
            <param name="destination">The <see cref="T:System.Uri"/> of the requested FTP server.</param>
            <returns>The <see cref="T:System.Uri"/> of the FTP server if the resource is on the bypass list; otherwise, the <see cref="T:System.Uri"/> of the proxy.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.Uri)">
            <summary>
            Indicates whether to use the proxy server for the specified host.
            </summary>
            <param name="host">The <see cref="T:System.Uri"/> of the host to check for proxy use.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.String,System.Int32)">
            <summary>
            Indicates whether to use the proxy server for the specified host.
            </summary>
            <param name="hostName">The host address to check for proxy use.</param>
            <param name="port">The port port.</param>
            <returns><b>true</b> if the proxy server should not be used for <i>host</i>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor">
            <summary>
            Initializes an empty instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <remarks>
            The default constructor initializes an empty instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/>
            class with the <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType"/> property set to <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType">ProxyType.None</see>.
            When the <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType"/> is set to <see cref="P:ComponentPro.Net.WebProxyEx.ProxyType">ProxyType.None</see>, the <see cref="M:ComponentPro.Net.WebProxyEx.IsBypassed(System.Uri)"/> method
            returns <b>true</b>, and the <see cref="M:ComponentPro.Net.WebProxyEx.GetProxy(System.Uri)"/> method returns the destination address.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="username">A user name to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String[],System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="credentials">A <see cref="T:System.Net.NetworkCredential"/> to submit to the proxy server for authentication.</param>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> 
            class with the specified type, hostname, port, and credentials
            with base authentification.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> 
            class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials,
            with base authentification.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="M:ComponentPro.Net.WebProxyEx.#ctor(ComponentPro.Net.ProxyType,ComponentPro.Net.ProxyHttpConnectAuthMethod,System.String,System.Int32,System.Boolean,System.String[],System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.WebProxyEx"/> class with the specified type, hostname, port, bypass setting, list of URIs to bypass, and credentials.
            </summary>
            <param name="proxyType">The type of the proxy.</param>
            <param name="authenticationMethod">Authentication method.</param>
            <param name="host">The hostname of the proxy server.</param>
            <param name="port">The port of the proxy server.</param>
            <param name="bypassOnLocal"><b>true</b> to bypass the proxy for local addresses; otherwise, <b>false</b>.</param>
            <param name="bypassList">An array of regular expression strings containing the URIs of the servers to bypass.</param>
            <param name="domain">The domain name.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
            <remarks>This constructor is for Medium Trust Environment.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Server">
            <summary>
            Gets or sets the hostname of the proxy server.
            </summary>
            <value>The hostname of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Port">
            <summary>
            Gets or sets the port of the proxy server.
            </summary>
            <value>The port of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.ProxyType">
            <summary>
            Gets or sets the type of the proxy server.
            </summary>
            <value>The type of the proxy server.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.AuthenticationMethod">
            <summary>
            Gets or sets the authentication method to use for HTTP CONNECT proxy.
            NTLM authentication is only supported by some HTTP CONNECT proxies.
            </summary>
            <value>An authentication method.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Credentials">
            <summary>
            Gets or sets the credentials to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>An <see cref="T:System.Net.ICredentials"/> containing the credentials to submit to the proxy server for authentication.</value>
            <remarks>Only credentials of type <see cref="T:System.Net.NetworkCredential"/> are supported.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.UserName">
            <summary>
            Gets or sets the username to submit to the proxy server for authentication.
            </summary>
            <value>A username to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Password">
            <summary>
            Gets or sets the password to submit to the proxy server for authentication.
            Password authentication is not supported by SOCKS4 and SOCKS4a.
            </summary>
            <value>A password to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Domain">
            <summary>
            Gets or sets the domain to submit to the proxy server for authentication.
            </summary>
            <value>A domain to submit to the proxy server for authentication.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.LocalPortRange">
            <summary>
            Gets or sets the local TCP port range to which to bind the connections.
            </summary>
            <value>The port range.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassProxyOnLocal">
            <summary>
            Gets or sets a value indicating whether to bypass the proxy server for local addresses.
            </summary>
            <value><b>true</b> to bypass the proxy server for local addresses; otherwise, <b>false</b>. The default value is <b>false</b>.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassArrayList">
            <summary>
            Gets a list of addresses that do not use the proxy server.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> containing a list of regular expressions that describe URIs that will not use the proxy server when accessed.</value>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.BypassList">
            <summary>
            Gets or sets an array of addresses that do not use the proxy server.
            </summary>
            <value>An array containing a list of regular expressions that describe URIs that will not use the proxy server when accessed.</value>
            <remarks>Not supported by ComponentPro FTP for .NET Compact Framework.</remarks>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode requests and responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode requests and responses. Default is <see cref="T:System.Text.Encoding">Encoding.Default</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.WebProxyEx.SendRetryTimeout">
            <summary>
            Specifies how long (in milliseconds) to continue try sending data before giving up on slow networks. 
            Set it to 0 or -1 means to use the same value as proxy socket timeout.
            </summary>
            <value></value>
        </member>
        <member name="T:ComponentPro.Security.Certificates.HashAlgorithmType">
            <summary>
            Specifies the hash algorithm used to compute the hash for hash signing and verification methods.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.Unsupported">
            <summary>
            Unsupported hash algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.MD5">
            <summary>
            MD5.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA1">
            <summary>
            SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.MD5SHA1">
            <summary>
            MD5SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.GOST_R3411_94">
            <summary>
            GOST R 34.11-94.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA256">
            <summary>
            SHA-256.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA384">
            <summary>
            SHA-384.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.HashAlgorithmType.SHA512">
            <summary>
            SHA-512.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.CryptographicCollection">
            <summary>
            A base class for various collections of cryptographic objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.CryptographicCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the collection.</returns>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.CryptographicCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/> to a compatible one-dimensional
            <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.Count">
            <summary>
            Gets the number of items in the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.
            </summary>
            <value>The number of items in collection.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/> is synchronized.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.CryptographicCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:ComponentPro.Security.Cryptography.CryptographicCollection"/>.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.CertificateException">
            <summary>
            The exception that is thrown when a certificate-related error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Certificates.CertificateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Security.Certificates.CertificateException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.Security.Certificates.CertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:ComponentPro.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class
            with a specified error message and a reference to the
            inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.PkcsBase">
            <summary>
            Base class for various PKCS objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.PkcsBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.PkcsBase"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus">
            <summary>
            Signature validation status.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.CertificateNotValid">
            <summary>Certificate is not valid.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.CertificateNotAvailable">
            <summary>Certificate is not available.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.UnsupportedDigestAlgorithm">
            <summary>A digest algorithm is not supported.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.UnsupportedSignatureAlgorithm">
            <summary>A signature algorithm is not supported.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.InvalidSignature">
            <summary>A signature is invalid.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.InvalidKeyUsage">
            <summary>Invalid key usage. The certificate usage doesn't include message signing.</summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationStatus.ContentTypeMismatch">
            <summary>Content type mismatch.</summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult">
            <summary>
            Represents the result of signature validation.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.Status">
            <summary>
            Gets the status mask.
            </summary>
            <value>Status mask.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.CertificateValidationStatus">
            <summary>
            Gets the certificate validation status mask.
            </summary>
            <value>Certificate validation status mask.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SignatureValidationResult.Valid">
            <summary>
            Gets the certificate chain validity status.
            </summary>
            <value>True if valid, false if not valid.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability">
            <summary>
            Represents an S/MIME capability.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability.#ctor(c_TE)">
            <summary>
            Initializes an instance of a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> with no parameters.
            </summary>
            <param name="oid">The object identifier that identifies the S//MIME capability.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability.#ctor(c_TE,System.Byte[])">
            <summary>
            Initializes an instance of a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/>.
            </summary>
            <param name="oid">The object identifier that identifies the S//MIME capability.</param>
            <param name="parameters">Capability parameters in ASN.1 format.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability.Parameters">
            <summary>
            Gets the S/MIME capability parameters.
            </summary>
            <value>An array of bytes in ASN.1 format.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection">
            <summary>
            A collection of <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Add(ComponentPro.Security.Cryptography.Pkcs.SmimeCapability)">
            <summary>
            Adds a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> to the collection.
            </summary>
            <param name="capability">An S/MIME capability to add.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Remove(ComponentPro.Security.Cryptography.Pkcs.SmimeCapability)">
            <summary>
            Removes a <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> from the collection.
            </summary>
            <param name="capability">An S/MIME capability to remove.</param>
        </member>
        <member name="M:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.CopyTo(ComponentPro.Security.Cryptography.Pkcs.SmimeCapability[],System.Int32)">
            <summary>
            Copies the range of elements from the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection"/> to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">One-dimensional zero-based array that is the destination of the elements copied from <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection"/>.</param>
            <param name="index">A zero-based index in the destination array at which copying begins.</param>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> to get or set.</param>
            <value>An S/MIME capability.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SmimeCapabilityCollection.Item(System.String)">
            <summary>
            Gets the first <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SmimeCapability"/> with the specified object identifier.
            </summary>
            <param name="oid">The object identifier, either friendly name or dotted string format.</param>
            <value>An S/MIME capability if found, or null if not found.</value>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType">
            <summary>
            Defines the type of subject identifier that identifies a subject and a certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.Unknown">
            <summary>
            The type of subject identifier is unknown.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.IssuerAndSerialNumber">
            <summary>
            The subject is identified by the certificate issuer and serial number.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.SubjectKeyIdentifier">
            <summary>
            The subject is identified by the hash of the subject's public key. The hash algorithm used is determined by the signature algorithm suite in the subject's certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifierType.PublicKey">
            <summary>
            The subject is identified by the subject's public key.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier">
            <summary>
            The <see cref="T:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier"/> class identifies a subject, either by certificate issuer
            and serial number, by the subject key identifier or by a public key.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.Type">
            <summary>
            Gets the type of the subject identifier.
            </summary>
            <value>The type of the subject identifier.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.SerialNumber">
            <summary>
            Gets the serial number of the certificate if
            this subject identifier is identified by the issuer name and serial number.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate serial number.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.SubjectKeyIdentifier">
            <summary>
            Gets the subject key identifier of the certificate if
            this subject identifier is identified by the subject key identifier.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate subject key identifier.</value>
        </member>
        <member name="P:ComponentPro.Security.Cryptography.Pkcs.SubjectIdentifier.PublicKey">
            <summary>
            Gets the public of the certificate if
            this subject identifier is identified by the public key.
            Otherwise, this property will return null.
            </summary>
            <value>Certificate public key.</value>
        </member>
        <member name="T:ComponentPro.Security.SecuritySettings">
            <summary>
            Provides security settings.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.SecuritySettings.ForceManagedAes">
            <summary>
            Forces RijndaelManaged to be used even when AesCryptoServiceProvider is available.
            </summary>
            <value>True if RijndaelManaged is to be used instead of AesCryptoServiceProvider; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Security.SecuritySettings.FipsAlgorithmsOnly">
            <summary>
            Enables or disables an option that specifies whether only FIPS 140-2 compliant cryptographic algorithm providers are to be used.
            </summary>
            <value>True if only FIPS 140-2 compliant algorithms are to be used; false to allow all supported algorithms.</value>
            <remarks>
            In .NET 2.0 and higher, this option reflects the Windows OS settings unless explicitly set to a different value.
            </remarks>
        </member>
        <member name="P:ComponentPro.Security.SecuritySettings.MediumTrust">
            <summary>
            Gets or sets a boolean value indicating whether to run the application in Medium Trust environment.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Certificates.CertificateVerificationStatus">
            <summary>
            Certificate validation status.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.TimeNotValid">
            <summary>
            This certificate or one of the certificates in the certificate chain is not time valid.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.TimeNotNested">
            <summary>
            Certificates in the chain are not properly time nested.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.Revoked">
            <summary>
            Trust for this certificate or one of the certificates in the certificate chain has been revoked.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.SignatureNotValid">
            <summary>
            The certificate or one of the certificates in the certificate chain does not have a valid signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.WrongUsage">
            <summary>
            The certificate or certificate chain is not valid for its proposed usage.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.RootNotTrusted">
            <summary>
            The certificate or certificate chain is based on an untrusted root.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownRev">
            <summary>
            The revocation status of the certificate or one of the certificates in the certificate chain is unknown.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CyclicChain">
            <summary>
            One of the certificates in the chain was issued by a certification authority that the original certificate had certified.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidExtension">
            <summary>
            One of the certificates has an invalid extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidPolicyConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            a policy constraints extension, and one of the issued certificates has
            a disallowed policy mapping extension or does not have a required issuance
            policies extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidBasicConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            a basic constraints extension and either the certificate cannot be used
            to issue other certificates or the chain path length has been exceeded.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidNameConstraints">
            <summary>
            The certificate or one of the certificates in the certificate chain has
            an invalid name constraints extension.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnsupportedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension containing unsupported fields.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotDefinedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and a name constraint is missing for one of the name choices in the end certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotPermittedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and there is not a permitted name constraint for one of the name choices in the end certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.ExcludedNameConstraint">
            <summary>
            The certificate or one of the certificates in the certificate chain has a name constraints extension and one of the name choices in the end certificate is explicitly excluded.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.IncompleteChain">
            <summary>
            The certificate chain is not compete.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlTimeNotValid">
            <summary>
            A CTL used to create this chain was not time valid.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlSignatureNotValid">
            <summary>
            A CTL used to create this chain did not have a valid signature.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CtlWrongUsage">
            <summary>
            A CTL used to create this chain is not valid for this usage.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.OfflineRev">
            <summary>
            The revocation status of the certificate or one of the certificates in the certificate chain is either off-line or stale.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NoIssuanceChainPolicy">
            <summary>
            The end certificate does not have any resultant issuance policies, and one of the issuing CA certificates has a policy constraints extension requiring it.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownError">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.PathTooLong">
            <summary>
            A path length constraint in the certification chain has been violated.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownCriticalExtension">
            <summary>
            A certificate contains an unknown extension that is marked critical.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.InvalidChain">
            <summary>
            A parent of a given certificate in fact did not issue that child certificate.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.UnknownCA">
            <summary>
            A certificate chain could not be built to a trusted root authority.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CNNotMatch">
            <summary>
            The certificate's CN name does not match the passed value.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.CANotTrusted">
            <summary>
            A certification chain processed correctly, but one of the CA certificates
            is not trusted by the policy provider.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.ExplicitDistrust">
            <summary>
            The certificate was explicitly marked as untrusted by the user.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.Malformed">
            <summary>
            A certificate is missing or has an empty value for an important field,
            such as a subject or issuer name.
            </summary>
            <remarks>Not supported in builds for .NET CF.</remarks>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.MoreErrors">
            <summary>
            There might be more errors apart from those reported.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.WeakAlgorithm">
            <summary>
            Certificate uses algorithm which is not considered secure on this platform.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Certificates.CertificateVerificationStatus.NotTrusted">
            <summary>
            Certificate is not trusted.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.ISecureShellClient">
            <summary>
            Standardizes members of SSH client classes.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(ComponentPro.Net.GssApiAuthenticationSettings)">
            <summary>
            Authenticates to the server using GSSAPI.
            </summary>
            <remarks>
            .NET: Kerberos and NTLM methods are supported.<br/>
            .NET CF: Only NTLM method is supported.
            </remarks>
            <param name="gssApiAuthenticationSettings">The GSSAPI authentication settings.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String,ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
            <param name="keyboardInteractiveAuthenticationHandler">The keyboard interactive authentication handler.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using a combination of password and pkey. If password is null reference (Nothing in VB.NET), the <paramref name="privateKey"/> must be specified to authenticate.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated, or null reference (Nothing in VB.NET).</param>
            <param name="privateKey">The RSA or DSA private key data stream for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates the user to the SSH server using his private key.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="privateKey">The RSA or DSA private key data stream for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the user to the SSH server.
            </summary>
            <param name="userName">The name of the user to be authenticated.</param>
            <param name="password">The password of the user to be authenticated.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the specified user on the SSH server.
            </summary>
            <param name="userName">The username.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>An <see cref="T:ComponentPro.Net.SecureShellChangePasswordResult"/> that represents the result of change password operation.</returns>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.KeepAlive">
            <summary>
            Sends a data packet to the server to keep the connection alive.
            </summary>        
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ReuseConnection(ComponentPro.Net.SecureShellConnection)">
            <summary>
            Re-uses the specified <paramref name="connection"/> without having to connect to the SSH server and authenticate the user.
            </summary>
            <param name="connection">An SSH connection that is already connected and authenticated.</param>
        </member>
        <member name="M:ComponentPro.Net.ISecureShellClient.ReuseConnection(ComponentPro.Net.ISecureShellClient)">
            <summary>
            Re-uses the underlying connection of the specified <paramref name="sshClient"/> without having to connect to the SSH server and authenticate the user.
            </summary>
            <param name="sshClient">An SSH connection that is already connected and authenticated.</param>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.ServerId">
            <summary>
            Gets the server Id (welcome message) returned after a successful connection.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.HostKey">
            <summary>
            Gets the server's host key string.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session has already been authenticated.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.ISecureShellClient.Connection">
            <summary>
            Gets or sets the underlying SSH connection.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannel">
            <summary>
            Represents an SSH channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestPseudoTerminal(System.String,System.Int32,System.Int32)">
            <summary>
            Requests a pseudo-terminal.
            </summary>
            <param name="terminal">Terminal name, e.g. "vt100".</param>
            <param name="width">Number of columns.</param>
            <param name="height">Number of rows.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.PassEnvironmentVariable(System.String,System.String)">
            <summary>
            Passes an environment variable to the shell/command to be started later.
            </summary>
            <param name="name">Variable name.</param>
            <param name="value">Variable value.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestPseudoTerminal">
            <summary>
            Requests an 80x25 vt100 pseudo-terminal.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SetTerminalSize(System.Int32,System.Int32)">
            <summary>
            Sets a new terminal size.
            </summary>
            <param name="width">Number of columns.</param>
            <param name="height">Number of rows.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SendEof">
            <summary>
            Sends EOF (end-of-file) indicator to the server. No further data should be sent after this.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.SendBreak(System.Int32)">
            <summary>
            Sends a break request to the server. This may or may not have any effect.
            </summary>
            <param name="breakLength">Break length, in milliseconds (if supported by the underlying channel).</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestShell">
            <summary>
            Requests a shell.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestExec(System.String)">
            <summary>
            Requests an execution of the specified command.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.RequestSubsystem(System.String)">
            <summary>
            Requests a specified subsystem.
            </summary>
            <param name="subsystem">Subsystem name, such as &quot;sftp&quot;.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Close">
            <summary>
            Closes the current channel.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.GetAvailable">
            <summary>
            Gets the number of bytes available in the receive buffer. 
            If no data is available, the method will process any pending incoming packets.
            </summary>
            <returns>Number of bytes available.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the socket.
            </summary>
            <param name="microSeconds">Time to wait for a response, in microseconds.</param>
            <param name="mode">Select mode.</param>
            <returns>True if data can be sent or read or if the connection was closed.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives data send by the server through this channel.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The offset to the array at which to place the received data.</param>
            <param name="count">Number of bytes to receive.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to the server through this channel.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <param name="offset">The offset to the array at which the data starts.</param>
            <param name="count">Number of bytes to send.</param>
            <returns>The number of bytes sent.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.ToString">
            <summary>
            Returns a string representation of this channel.
            </summary>
            <returns>Local channel ID.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellChannel.Dispose">
            <summary>
            Implementation of IDisposable.Dispose()
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.Type">
            <summary>
            Gets the type of this channel.
            </summary>
            <value>Channel type.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.State">
            <summary>
            Gets the state of this channel.
            </summary>
            <value>Channel state.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.ExitStatus">
            <summary>
            Gets the channel exit status, if available. Otherwise, it returns null.
            </summary>
            <value>Channel exit status.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.TerminalWidth">
            <summary>
            Gets the terminal width.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.TerminalHeight">
            <summary>
            Gets the terminal height.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellChannel.Available">
            <summary>
            Gets the number of bytes available in the receive buffer.
            </summary>
            <returns>Number of bytes available.</returns>
            <remarks>Unlike the <see cref="M:ComponentPro.Net.SecureShellChannel.GetAvailable"/> method, this property will not process any pending incoming packets.</remarks>
        </member>
        <member name="T:ComponentPro.Net.SecureShellCipher">
            <summary>
            Represents an SSH cipher.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellCipher.ToString">
            <summary>
            Returns a description of the cipher.
            </summary>
            <returns>Description of the cipher.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingMacAlgorithm">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingEncryptionAlgorithm">
            <summary>
            Gets the active encryption algorithm.
            </summary>
            <value>Active encryption algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingMacAlgorithm">
            <summary>
            Gets the active message authentication code (MAC) algorithm.
            </summary>
            <value>Active MAC algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingEncryptionAlgorithm">
            <summary>
            Gets the active encryption algorithm.
            </summary>
            <value>Active encryption algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.KeyExchangeAlgorithm">
            <summary>
            Gets the key exchange algorithm used during key negotiation.
            </summary>
            <value>Key exchange algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.HostKeyAlgorithm">
            <summary>
            Gets the host key algorithm used during key negotiation.
            </summary>
            <value>Host key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.OutgoingCompressionEnabled">
            <summary>
            Gets the value indicating whether outgoing compression is used.
            </summary>
            <value>True if outgoing compression is enabled; false otehrwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellCipher.IncomingCompressionEnabled">
            <summary>
            Gets the value indicating whether incoming compression is used.
            </summary>
            <value>True if incoming compression is enabled; false otehrwise.</value>
        </member>
        <member name="T:ComponentPro.Net.BannerEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.Banner"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.BannerEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.Banner"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.BannerEventArgs.Banner">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:ComponentPro.Net.HostKeyVerifyingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.HostKeyVerifyingEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.HostKeyVerifying"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.ServerKey">
            <summary>
            Gets the server key.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKeyData">
            <summary>
            Gets the server's host key raw data.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKey">
            <summary>
            Gets the server's host key string.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.HostKeyAlgorithm">
            <summary>
            Gets the server's host key algorithm.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.HostKeyVerifyingEventArgs.Accept">
            <summary>
            Gets and sets a value that indicates the application has verified the host key.
            </summary>
            <remarks>
            By default, this property is set to false. If you do not set this to true, then the connection establishment stops and an <see cref="T:ComponentPro.Net.SecureShellException"/> is thrown.
            </remarks>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.KeyboardInteractiveAuthentication"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Ignore">
            <summary>
            Ignore the authentication request. Equivalent to no event being initialized at all.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Name">
            <summary>
            Gets the SSH server name.
            </summary>
            <value>Server name.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Instructions">
            <summary>
            Gets instructions.
            </summary>
            <value>Instructions.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the authentication.
            </summary>
            <value>True to cancel the authentication; false to continue with the authentication (default).</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs.Requests">
            <summary>
            Collection of prompts and answers for the authentication request.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.PasswordChangeRequestEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest"/> event of a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Net.PasswordChangeRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:ComponentPro.Net.ISecureShellClient.PasswordChangeRequest"/> event of 
            a class implementing the <see cref="T:ComponentPro.Net.ISecureShellClient"/> interface.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.LastAttemptFailed">
            <summary>
            Gets a boolean value indicating that the last password change attempt has failed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Prompt">
            <summary>
            Gets the server's prompt.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Language">
            <summary>
            Gets the prompt's language.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.NewPassword">
            <summary>
            Gets or sets the new password to change.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.PasswordChangeRequestEventArgs.Cancel">
            <summary>
            Gets or sets a boolean value indicating whether to cancel the password change and throw an exception.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellException">
            <summary>
            The exception that is thrown when an SSH error occurs.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellException.#ctor(System.String,System.Exception,ComponentPro.Net.SecureShellExceptionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:ComponentPro.Net.SecureShellException"/> class with the specified error message, status, 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
            <param name="status">One of the <see cref="T:ComponentPro.Net.SecureShellExceptionStatus"/> values.</param>
        </member>
        <member name="P:ComponentPro.Net.SecureShellException.Status">
            <summary>
            Gets the exception status.
            </summary>
            <value>One of the <see cref="T:ComponentPro.Net.SecureShellExceptionStatus"/> values.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellFingerprint">
            <summary>
            Represents the server public key fingerprint.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.Compute(System.Byte[])">
            <summary>
            Computes a fingerprint of the specified key.
            </summary>
            <param name="key">Key data.</param>
            <returns>Fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.FromBase64String(System.String)">
            <summary>
            Computes a fingerprint of the specified Base64-encoded key.
            </summary>
            <param name="encodedKey">Base64-encoded key data.</param>
            <returns>Fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToArray">
            <summary>
            Returns the fingerprint as a byte array.
            </summary>
            <returns>Fingerprint as a byte array.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToString">
            <summary>
            Returns a string representation of the fingerprint.
            </summary>
            <returns>A string representation of the fingerprint.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToArray(ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Returns the fingerprint produced using the specified algorithm as a byte array.
            </summary>
            <param name="algorithm">Algorithm to be used to compute the fingerprint.</param>
            <returns>Fingerprint as a byte array.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellFingerprint.ToString(ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Returns a string representation of the fingerprint produced using the specified algorithm.
            </summary>
            <param name="algorithm">Algorithm to be used to compute the fingerprint.</param>
            <returns>A string representation of the fingerprint.</returns>
        </member>
        <member name="T:ComponentPro.Net.GssApiMechanism">
            <summary>
            Defines the supported GSSAPI mechanisms.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.GssApiMechanism.NTLM">
            <summary>
            NTLM authentication (also known as Secure Password Authentication - SPA)
            </summary>
        </member>
        <member name="F:ComponentPro.Net.GssApiMechanism.Kerberos">
            <summary>
            Kerberos v5.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.GssApiAuthenticationSettings">
            <summary>
            Represents the GSSAPI authentication settings.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.GssApiAuthenticationSettings.Clone">
            <summary>
            Creates a new <see cref="T:ComponentPro.Net.GssApiAuthenticationSettings"/> that is a copy of the current instance.
            </summary>
            <returns>A copy of this <see cref="T:ComponentPro.Net.GssApiAuthenticationSettings"/> instance.</returns>
        </member>
        <member name="M:ComponentPro.Net.GssApiAuthenticationSettings.#ctor">
            <summary>
            Creates a new <see cref="T:ComponentPro.Net.GssApiAuthenticationSettings"/> instance.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.GssApiAuthenticationSettings.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:ComponentPro.Net.GssApiAuthenticationSettings"/> instance using the specified credentials.
            </summary>
            <param name="userName">The user account name on the server, or a null reference (or Nothing in VB.NET) to use the integrated authentication (Single Sign-On).</param>
            <param name="domain">The user account domain on the server.</param>
            <param name="password">The password of the user account on the server.</param>
        </member>
        <member name="P:ComponentPro.Net.GssApiAuthenticationSettings.UserName">
            <summary>
            Gets or sets the user account name on the server, or a null reference (or Nothing in VB.NET) to use the integrated authentication (Single Sign-On).
            </summary>
        </member>
        <member name="P:ComponentPro.Net.GssApiAuthenticationSettings.Domain">
            <summary>
            Gets or sets the user account domain on the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.GssApiAuthenticationSettings.Password">
            <summary>
            Gets or sets the password of the user account on the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.GssApiAuthenticationSettings.TargetName">
            <summary>
            Gets or sets the Service Principal Name (SPN) of the server.
            </summary>
            <remarks>This should be the full server's hostname.</remarks>
        </member>
        <member name="P:ComponentPro.Net.GssApiAuthenticationSettings.Mechanisms">
            <summary>
            Gets or sets the allowed GSSAPI mechanisms, in order of preference.
            </summary>
            <remarks>
            Set this value to null to reset to the default order - Kerberos and then NTLM.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.GssApiAuthenticationSettings.CredentialDelegation">
            <summary>
            Gets or sets a boolean value indicating whether to forward (delegate) credentials to the server. The default is <c>false</c>.
            </summary>
            <remarks>For Kerberos only.</remarks>
        </member>
        <member name="T:ComponentPro.Net.SecureShellExitStatus">
            <summary>
            Channel exit status.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.ExitCode">
            <summary>
            Gets the process exit code.
            </summary>
            <value>Process exit code.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.SignalName">
            <summary>
            Gets the process signal name if available; or null.
            </summary>
            <value>Process signal name.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.CoreDumped">
            <summary>
            Gets a value indicating whether the process failed with a core dump.
            </summary>
            <value>True if core-dumped; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellExitStatus.ErrorMessage">
            <summary>
            Gets the process error message if available; or null.
            </summary>
            <value>Process error message.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChangePasswordResult">
            <summary>
            Defines the the result of change password operation.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.Success">
            <summary>
            Password of the user has been changed and the user has been authenticated. User does not need to authenticate again.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.ChangedButNotAuthenticated">
            <summary>
            Password of the user has been changed, but the user needs to be authenticated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChangePasswordResult.Failure">
            <summary>
            Change password operation failed because either password changing was not supported, or the old password was not correct.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellMacAlgorithm">
            <summary>
            MAC algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.None">
            <summary>
            No MAC algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.MD5">
            <summary>
            MD5 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.SHA1">
            <summary>
            SHA1 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellMacAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellEncryptionAlgorithm">
            <summary>
            Encryption algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.RC4">
            <summary>
            RC4.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.TripleDES">
            <summary>
            TripleDES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.AES">
            <summary>
            AES.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Twofish">
            <summary>
            Twofish.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellEncryptionMode">
            <summary>
            Encryption mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.CBC">
            <summary>
            CBC mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.CTR">
            <summary>
            CTR mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellEncryptionMode.Any">
            <summary>
            Any mode.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellAuthenticationMethod">
            <summary>
            Authentication method.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.Password">
            <summary>
            Authentication method "password".
            </summary>		
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.KeyboardInteractive">
            <summary>
            Authentication method "keyboard-interactive".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.PublicKey">
            <summary>
            Authentication method "publickey".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.GssapiWithMic">
            <summary>
            Authentication method "gssapi-with-mic".
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellAuthenticationMethod.Any">
            <summary>
            Any method.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellKeyExchangeAlgorithm">
            <summary>
            Key exchange algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.None">
            <summary>
            No algorithm
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroup1SHA1">
            <summary>
            Diffie-Hellman (Oakley Group 2) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroup14SHA1">
            <summary>
            Diffie-Hellman (Oakley Group 14) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroupExchangeSHA1">
            <summary>
            Diffie-Hellman (Group Exchange) with SHA1.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.DiffieHellmanGroupExchangeSHA256">
            <summary>
            Diffie-Hellman (Group Exchange) with SHA256.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellKeyExchangeAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellHostKeyAlgorithm">
            <summary>
            Host key algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.None">
            <summary>
            No algorithm
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.RSA">
            <summary>
            RSA.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.DSS">
            <summary>
            DSS.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.Certificate">
            <summary>
            X509 certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellHostKeyAlgorithm.Any">
            <summary>
            Any algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:ComponentPro.Net.SecureShellException"/> class.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.UnknownError">
            <summary>
            An unclassifiable error occurred. This is the default value for <see cref="T:ComponentPro.Net.SecureShellExceptionStatus"/>.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ConnectionFailed">
            <summary>
            The remote service point could not be contacted at the transport level.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ConnectionClosed">
            <summary>
            The connection was prematurely closed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.ProtocolError">
            <summary>
            The response received from the server was complete but indicated a protocol-level error.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.UnexpectedMessage">
            <summary>
            The response received from the server was complete but unexpected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.Timeout">
            <summary>
            No response was received during the time-out period for a request.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.OperationFailure">
            <summary>
            The requested operation could not be completed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.PasswordChangeRequired">
            <summary>
            Password needs to be changed.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellExceptionStatus.SocketError">
            <summary>
            The error at transport level occurred.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellSessionState">
            <summary>
            Defines the SSH session state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.None">
            <summary>
            Not connected to the SSH server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.Connecting">
            <summary>
            Connecting to the SSH server.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.KeyExchange">
            <summary>
            In key exchange mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.Ready">
            <summary>
            The server is ready.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellSessionState.Closed">
            <summary>
            The session has been closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelType">
            <summary>
            SSH channel type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.Session">
            <summary>
            Session.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.DirectTcpIp">
            <summary>
            Direct TCP/IP tunnel.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelType.ForwardedTcpIp">
            <summary>
            Forwarder TCP/IP tunnel.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellChannelState">
            <summary>
            SSH channel state.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellChannelState.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TcpIpForwardingRule">
            <summary>
            Represents a single TCP forwarding rule.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.TcpIpForwardingRule.Address">
            <summary>
            Gets the listening IP address.
            </summary>
            <value>Listening IP address.</value>
        </member>
        <member name="P:ComponentPro.Net.TcpIpForwardingRule.Port">
            <summary>
            Gets the listening port.
            </summary>
            <value>Listening port.</value>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveRequest">
            <summary>
            Represents one question/answer pair for the <see cref="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication">KeyboardInteractiveAuthentication</see> event.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveRequest.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.KeyboardInteractiveRequest"/>.
            </summary>
            <param name="prompt">Prompt.</param>
            <param name="echo">A value indicationg whether the prompt at the specified index should be displayed.</param>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Prompt">
            <summary>
            Gets the authentication prompt (question).
            </summary>
            <value>Authentication prompt.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Response">
            <summary>
            Gets or sets response to the prompt.
            </summary>
            <value>Response.</value>
        </member>
        <member name="P:ComponentPro.Net.KeyboardInteractiveRequest.Echo">
            <summary>
            Gets a value indicating whether the response should be displayed.
            </summary>
            <value><c>true</c> if the response should be displayed; otherwise <c>false</c>.</value>
        </member>
        <member name="T:ComponentPro.Net.KeyboardInteractiveRequestCollection">
            <summary>
            Collection of <see cref="T:ComponentPro.Net.KeyboardInteractiveRequest"/> objects.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveRequestCollection.#ctor">
            <summary>
            Creates a new instance of <see cref="T:ComponentPro.Net.KeyboardInteractiveRequestCollection"/>.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.KeyboardInteractiveRequestCollection.#ctor(System.String[],System.Boolean[])">
            <summary>
            Creates a new instance of KeyboardInteractiveRequestCollection.
            </summary>
            <param name="prompt">Prompts.</param>
            <param name="echo">Should echo be displayed.</param>
        </member>
        <member name="T:ComponentPro.Net.SecureShellConfig">
            <summary>
            Represents the SSH configuration.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.GetSshConfig">
            <summary>
            Returns a shallow copy of the current parameters.
            </summary>
            <returns>A shallow copy of current parameters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.GetEncryptionAlgorithms">
            <summary>
            Gets a list of allowed encryption algorithms IDs and their order. See <see cref="M:ComponentPro.Net.SecureShellConfig.SetEncryptionAlgorithms(System.String[])"/> for more info.
            </summary>
            <returns>List of encryption algorithm IDs.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConfig.SetEncryptionAlgorithms(System.String[])">
            <summary>
            Specifies a list of allowed encryption algorithms IDs and their order.
            <see cref="P:ComponentPro.Net.SecureShellConfig.EncryptionAlgorithms"/> and <see cref="P:ComponentPro.Net.SecureShellConfig.EncryptionModes"/> still apply.
            Setting to null (Nothing in VB.NET) or an empty list specifies that the default list and order is to be used.
            See the remarks for a list of supported algorithm IDs.
            </summary>
            <param name="algorithmIds">List of algorithm IDs</param>
            <remarks>
            Currently, supported algorithms are:
            "aes256-ctr", "aes192-ctr", "aes128-ctr", "aes256-cbc",
            "aes192-cbc", "aes128-cbc", "3des-ctr", "3des-cbc",
            "twofish256-ctr", "twofish192-ctr", "twofish128-ctr",
            "twofish256-cbc", "twofish192-cbc", "twofish128-cbc",
            "twofish-cbc", "blowfish-ctr", "blowfish-cbc", "arcfour256",
            "arcfour128", "arcfour"
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.MacAlgorithms">
            <summary>
            Get or sets the allowed message authentication code algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.EncryptionAlgorithms">
            <summary>
            Gets or sets the group of allowed encryption algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.EncryptionModes">
            <summary>
            Gets or sets the group of allowed encryption modes.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.AuthenticationMethods">
            <summary>
            Gets or sets the group of allowed authentication methods.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.KeyExchangeAlgorithms">
            <summary>
            Gets or sets the group of allowed key exchange algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.HostKeyAlgorithms">
            <summary>
            Gets or sets the group of allowed host key algorithms.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.PreferredHostKeyAlgorithm">
            <summary>
            Gets or sets the preferred host key (server key) algorithm.
            </summary>
            <value>Preferred host key algorithm. Only one value can be specified.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConfig.CompressionEnabled">
            <summary>
            Gets or sets a value indicating whether transfer compression is to be used if supported by the server.
            </summary>
            <value><c>true</c> to use compression; <c>false</c> to not use compression (default).</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPublicKeyFormat">
            <summary>
            Specifies public key file format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPublicKeyFormat.Ssh2Base64">
            <summary>Base64-encoded SSH2 public key format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPublicKeyFormat.Ssh2Raw">
            <summary>Raw SSH2 public ket format.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPublicKey">
            <summary>
            Represents SSH RSA or DSA public key.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.Byte[])">
            <summary>
            Loads a SSH2 public key from the specified raw data.
            </summary>
            <param name="data">Raw private key data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.String)">
            <summary>
            Loads a SSH2 public key from the specified file.
            </summary>
            <param name="path">A path to file with the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.#ctor(System.IO.Stream)">
            <summary>
            Loads a SSH2 public key from the specified stream.
            </summary>
            <param name="input">A stream with the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA public keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA public keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.String)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded SSH2 public key format.
            </summary>
            <param name="path">A path to a file to which to save the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.String,ComponentPro.Net.SecureShellPublicKeyFormat)">
            <summary>
            Saves the public key into the supplied stream in the specified format.
            </summary>
            <param name="path">A path to a file to which to save the public key.</param>
            <param name="format">Public key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.IO.Stream)">
            <summary>
            Saves the public key into the supplied stream in Base64-encoded SSH2 public key format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.SavePublicKey(System.IO.Stream,ComponentPro.Net.SecureShellPublicKeyFormat)">
            <summary>
            Saves the public key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the public key.</param>
            <param name="format">Public key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.GetPublicKey">
            <summary>
            Gets the public key in SSH format.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPublicKey.VerifySignature(System.Byte[],System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Verifies an SSH authentication signature for the specified hash.
            </summary>
            <param name="hash">Hash.</param>
            <param name="signature">Signature to verify.</param>
            <param name="algorithm">Signature algorithm (only SHA1 is supported at the moment).</param>
            <returns>SSH authentication signature.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.KeyAlgorithm">
            <summary>
            Gets the key algorithm.
            </summary>
            <value>Key algorithm.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.KeyAlgorithmId">
            <summary>
            Gets the key algorithm ID
            </summary>
            <value>Key algorithm ID.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.Comment">
            <summary>
            Gets or sets the key comment. The comment is used while saving in some formats.
            </summary>
            <value>Key comment.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellPublicKey.Fingerprint">
            <summary>
            Gets the public key fingerprint.
            </summary>
            <value>Public key fingerprint.</value>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPrivateKeyFormat">
            <summary>
            Specifies private key file format.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.Pkcs8">
            <summary>PKCS #8 format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.Putty">
            <summary>PuTTY PPKv2 format.</summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellPrivateKeyFormat.OpenSsh">
            <summary>OpenSSH/OpenSSL SSLeay format.</summary>
        </member>
        <member name="T:ComponentPro.Net.SecureShellPrivateKey">
            <summary>
            Represents SSH RSA or DSA private key. Private key data also includes the public key.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Create">
            <summary>
            Generates an SSH private key using the RSA algorithm with a key size of 1024 bits.
            </summary>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Create(ComponentPro.Net.SecureShellHostKeyAlgorithm,System.Int32)">
            <summary>
            Generates an SSH private key using the specified algorithm and key size.
            </summary>
            <param name="algorithm">Key algorithm. RSA or DSA.</param>
            <param name="keySize">Key size.</param>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateFrom(System.Security.Cryptography.RSAParameters)">
            <summary>
            Creates an SSH private key from the specified RSA parameters.
            </summary>
            <param name="parameters">The RSA parameters.</param>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateFrom(System.Security.Cryptography.DSAParameters)">
            <summary>
            Creates an SSH private key from the specified DSA parameters.
            </summary>
            <param name="parameters">The DSA parameters.</param>
            <returns>SSH private key object.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a certificate-based SSH key for use with SSH/SFTP servers that support X509 certificate authentication.
            </summary>
            <param name="certificate">X509 certificate.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.String,System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified path.
            </summary>
            <param name="path">A path to the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if not password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.IO.Stream,System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified stream.
            </summary>
            <param name="input">A stream from which to load the private key.</param>
            <param name="password">Password used to encrypted the private key, or null if not password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Byte[],System.String)">
            <summary>
            Loads a PKCS #8 or SSLeay-format RSA or DSA private key from the specified raw data.
            </summary>
            <param name="data">Raw private key data.</param>
            <param name="password">Password used to encrypted the private key, or null if not password needed.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Creates an SSH private key based on the specified <see cref="T:System.Security.Cryptography.RSA"/> or <see cref="T:System.Security.Cryptography.DSA"/> object.
            </summary>
            <param name="algorithm">An <see cref="T:System.Security.Cryptography.RSA"/> or <see cref="T:System.Security.Cryptography.DSA"/> object.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.IO.Stream,System.String,System.Object)">
            <summary>
            Saves the private key into the supplied stream in Base64-encoded PKCS #8 format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">The algorithm to use for encryption. Ignored if password is null. Null defaults to "3DES".</param>
            <remarks>
            The encryptionAlgorithm can accepts a String or a Type.
            Currently, the following strings and types are accepted:<br/>
            TripleDES: null, "3DES", "TripleDES", "1.2.840.113549.3.7", typeof(System.Security.Cryptography.TripleDES)<br/>
            DES: "DES", "1.3.14.3.2.7", typeof(System.Security.Cryptography.DES)<br/>
            RC2: "RC2", "1.2.840.113549.3.2", typeof(System.Security.Cryptography.RC2)<br/>
            To save the key in PuTTY format, pass the "putty" string to the encryptionAlgorithm argument.<br/>
            To save the key on OpenSSH/OpenSSL SSLeay format, pass the "ssleay" or "openssh" string to the encryptionAlgorithm argument.<br/>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.String,System.String,System.Object)">
            <summary>
            Saves the private key into the specified file in Base64-encoded PKCS #8 format.
            </summary>
            <param name="path">A path to stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="encryptionAlgorithm">The algorithm to use for encryption. Ignored if password is null. Null defaults to "3DES".</param>
            <remarks>
            The encryptionAlgorithm can accepts a String or a Type.
            Currently, the following strings and types are accepted:<br/>
            TripleDES: null, "3DES", "TripleDES", "1.2.840.113549.3.7", typeof(System.Security.Cryptography.TripleDES)<br/>
            DES: "DES", "1.3.14.3.2.7", typeof(System.Security.Cryptography.DES)<br/>
            RC2: "RC2", "1.2.840.113549.3.2", typeof(System.Security.Cryptography.RC2)<br/>
            To save the key in PuTTY format, pass the "putty" string to the encryptionAlgorithm argument.<br/>
            To save the key on OpenSSH/OpenSSL SSLeay format, pass the "ssleay" or "openssh" string to the encryptionAlgorithm argument.<br/>
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.IO.Stream,System.String,ComponentPro.Net.SecureShellPrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="output">A stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.Save(System.String,System.String,ComponentPro.Net.SecureShellPrivateKeyFormat)">
            <summary>
            Saves the private key into the supplied stream in the specified format.
            </summary>
            <param name="path">A path to stream to which to save the private key.</param>
            <param name="password">Password to encrypted the private key, or null if no encryption desired.</param>
            <param name="format">Private key file format.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetPrivateKey">
            <summary>
            Gets the raw form of the private key.
            </summary>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetDSAParameters">
            <summary>
            Gets the DSA parameters for a DSA key. May only be used for DSA private keys.
            </summary>
            <returns>DSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.GetRSAParameters">
            <summary>
            Gets the RSA parameters for a RSA key. May only be used for RSA private keys.
            </summary>
            <returns>RSA paramaters.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellPrivateKey.CreateSignature(System.Byte[],ComponentPro.Security.Certificates.HashAlgorithmType)">
            <summary>
            Creates an SSH authentication signature from the specified hash.
            </summary>
            <param name="hash">Hash.</param>
            <param name="algorithm">Signature algorithm (only SHA1 is supported at the moment).</param>
            <returns>SSH authentication signature.</returns>
        </member>
        <member name="T:ComponentPro.Net.SecureShellConnection">
            <summary>
            Represents a client-side SSH 2.0 session.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecureShellConnection.DefaultPort">
            <summary>
            Default SSH port (22).
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnPasswordChangeRequest(System.Object,ComponentPro.Net.PasswordChangeRequestEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.PasswordChangeRequest"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.PasswordChangeRequestEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnBannerReceived(System.Object,ComponentPro.Net.BannerEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.Banner"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.BannerEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnHostKeyVerifying(System.Object,ComponentPro.Net.HostKeyVerifyingEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.HostKeyVerifying"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.HostKeyVerifyingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OnKeyboardInteractiveAuthentication(System.Object,ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs)">
            <summary>
            Raises the <see cref="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication"/> event.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">A <see cref="T:ComponentPro.Net.KeyboardInteractiveAuthenticationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/> class.
            </summary>
            <remarks>
            The default constructor initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/>.
            </remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.#ctor(c_Y)">
            <summary>
            Initializes an instance of the <see cref="T:ComponentPro.Net.SecureShellConnection"/> class with the specified base socket.
            </summary>
            <param name="socket">Base socket.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Disconnect">
            <summary>
            Terminates the SSH session.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Dispose">
            <summary>
            Disposes the <see cref="T:ComponentPro.Net.SecureShellConnection"/> object and the underlying socket object.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.String)">
            <summary>
            Establishes a connection to port 22 of an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to an SSH server.
            </summary>
            <param name="serverName">The server address - either a hostname or a dotted string address.</param>
            <param name="serverPort">The server port (e.g. 22).</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to an SSH server.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Negotiate">
            <summary>
            Requests and performs an additional key exchange. Not all SSH servers support this.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the specified user's password on the SSH server and authenticates.
            </summary>
            <param name="userName">Username.</param>
            <param name="oldPassword">Old password.</param>
            <param name="newPassword">New password.</param>
            <returns>Password change result.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates to the SSH server using a username and an RSA or DSA private key.
            </summary>
            <param name="userName">Username.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,System.String)">
            <summary>
            Authenticates to the SSH server using a username and password.
            </summary>
            <param name="userName">Username.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(System.String,System.String,ComponentPro.Net.SecureShellPrivateKey)">
            <summary>
            Authenticates to the SSH server using a username and an RSA or DSA private key and a password.
            </summary>
            <param name="userName">Username.</param>
            <param name="password">Password.</param>
            <param name="privateKey">RSA or DSA private key for key-based authentication.</param>
            <remarks>This method is supported by GlobalScape SFTP server.</remarks>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.Authenticate(ComponentPro.Net.GssApiAuthenticationSettings)">
            <summary>
            Authenticates to the server using GSSAPI. Kerberos (not on .NET CF) and NTLM methods are supported.
            </summary>
            <param name="credentials">Credentials.</param>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenChannel(ComponentPro.Net.SecureShellChannelType,System.Int32)">
            <summary>
            Opoens an SSH channel of the specified type.
            </summary>
            <param name="type">Channel type.</param>
            <param name="bufferSize">Buffer size.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenSession">
            <summary>
            Opens an SSH session channel.
            </summary>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenTcpIpTunnel(System.Net.IPEndPoint)">
            <summary>
            Opens an outgoing TCP/IP tunnel to the specified remote endpoint.
            </summary>
            <param name="remoteEP">Remote endpoint.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.OpenTcpIpTunnel(System.String,System.Int32)">
            <summary>
            Opens an outgoing TCP/IP tunnel to the specified remote endpoint.
            </summary>
            <param name="hostname">Hostname.</param>
            <param name="port">Port.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.KeepAlive">
            <summary>
            Sends an SSH_MSG_IGNORE packet to the server.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)">
            <summary>
            Starts incoming TCP/IP tunnel on the specified IP address and port at the SSH server.
            </summary>
            <param name="address">Remote IP address to bind to. Most SSH installations only allow 127.0.0.1.</param>
            <param name="port">Remote port to bind to. Set this to 0 to get a random port automatically.</param>
            <returns>A forwarding handle.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.EndTcpIpForwarding(ComponentPro.Net.TcpIpForwardingRule)">
            <summary>
            Stops an incoming TCP/IP tunnel.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)"/>.</param>
            <returns>A forwarding handle.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.AcceptTcpIpForwarding(ComponentPro.Net.TcpIpForwardingRule,System.Int32)">
            <summary>
            Accepts a forwarded incoming connection.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)"/>.</param>
            <param name="timeout">
            Specifies an amount of time (in milliseconds) to wait for incoming connections. Use -1 to specify an infinite time and 1 to just return
            as soon as the current queue status is checked, or a higher value to wait for the specified amount of time.
            </param>
            <returns>SSH channel.</returns>
        </member>
        <member name="M:ComponentPro.Net.SecureShellConnection.AcceptTcpIpForwarding(ComponentPro.Net.TcpIpForwardingRule)">
            <summary>
            Accepts a forwarded incoming connection. If there is no incoming connection in the queue, waits indefinitely.
            </summary>
            <param name="handle">Incoming tunnel handle returned by <see cref="M:ComponentPro.Net.SecureShellConnection.BeginTcpIpForwarding(System.String,System.Int32)"/>.</param>
            <returns>SSH channel.</returns>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.UserName">
            <summary>
            Gets the authenticated user name, if available.
            </summary>
            <value>User name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerName">
            <summary>
            Gets the server name, if available.
            </summary>
            <value>Server name, or null (Nothing in VB.NET).</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerPort">
            <summary>
            Gets the server port, if available.
            </summary>
            <value>server port, or 0.</value>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.Banner">
            <summary>
            Occurs when a banner message is received from the server.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.HostKeyVerifying">
            <summary>
            Occurs when a fingerprint is received from the server and needs to be validated.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.KeyboardInteractiveAuthentication">
            <summary>
            Occurs when an authentication request is received from the server that cannot be answered programatically.
            </summary>
        </member>
        <member name="E:ComponentPro.Net.SecureShellConnection.PasswordChangeRequest">
            <summary>
            Occurs when user's password need to be changed.
            </summary>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Timeout">
            <summary>
            Gets or sets the length of time before the operation times out (specify -1 or 0 to indicate that the request does not time out).
            </summary>
            <value>
            The length of time, in milliseconds, until the operation times out,
            or the value -1 or 0 to indicate that the request does not time out.
            Default is 60000 (60 seconds).
            </value>
            <remarks>
            <p>
            The internal timeout counter is reset every time data is sent
            or received from to server. This also means that data transfers only
            time out after x milliseconds of inactivity, not after x milliseconds
            from the start of the transfer.
            </p>
            <p>
            Minimal value is 1000. Setting this to a value lower than 1000 will set it to 1000.
            </p>
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Encoding">
            <summary>
            Gets or sets the <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses.
            </summary>
            <value>The <see cref="T:System.Text.Encoding">Encoding</see> to use to encode and decode command parameters and server responses. Default is <see cref="T:System.Text.Encoding">Encoding.UTF8</see>.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the <see cref="T:ComponentPro.Net.SecureShellConnection"/> is using for communications.</value>
            <remarks>
            The RemoteEndPoint property gets the network connection information associated with
            the remote host.
            RemoteEndPoint is set by <see cref="T:ComponentPro.Net.SecureShellConnection"/> methods that establish a connection
            to a remote host.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the <see cref="T:ComponentPro.Net.SecureShellConnection"/> is using for communications.</value>
            <remarks>
            The LocalEndPoint property contains the network connection information associated with the local network device.
            </remarks>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <remarks>
            <p>
            This property returns the latest known state of the session. 
            When it returns false, the session was either never connected, or no longer connected. 
            When it returns true, the session was connected at the time of the last I/O operation.
            </p>
            <p>
            <b>Note:</b> There is no guarantee that the session  is still connected even though
            <see cref="P:ComponentPro.Net.SecureShellConnection.IsConnected"/> returns true.
            </p>
            </remarks>
            <value>True if connected; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.IsAuthenticated">
            <summary>
            Gets a value indicating whether the session is authenticated.
            </summary>
            <value>True if authenticated; false otherwise.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Parameters">
            <summary>
            Gets or sets the security parameters of the current socket.
            </summary>
            <value>The security parameters of the current socket.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Cipher">
            <summary>
            Gets the active cipher.
            </summary>
            <value>Active cipher.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.Fingerprint">
            <summary>
            Gets the server public key fingerprint.
            </summary>
            <value>Server fingerprint.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerKey">
            <summary>
            Gets the server public key.
            </summary>
            <value>Server public key.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.State">
            <summary>
            Gets the current session state.
            </summary>
            <value>Session state.</value>
        </member>
        <member name="P:ComponentPro.Net.SecureShellConnection.ServerIdentification">
            <summary>
            Gets the server's identification string it returns after connected.
            </summary>
            <value>Server's identification string.</value>
        </member>
        <member name="T:ComponentPro.Net.SecurityMode">
            <summary>
            Specifies TLS/SSL security mode.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecurityMode.None">
            <summary>
            Unsecured connection. No TLS/SSL.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecurityMode.Implicit">
            <summary>
            Implicitly secured TLS/SSL connection.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.SecurityMode.Explicit">
            <summary>
            Explicitly secured TLS/SSL connection.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiCredentialUse">
            <summary>
            Define SSPI credential use. This is a flag that indicates how these credentials will be used.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiCredentialUse.Inbound">
            <summary>
            Validate an incoming server credential. 
            Inbound credentials might be validated by using an authenticating authority when InitializeSecurityContext or AcceptSecurityContext is called. 
            If such an authority is not available, the function will fail and return SEC_E_NO_AUTHENTICATING_AUTHORITY.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiCredentialUse.Outbound">
            <summary>
            Allow a local client credential to prepare an outgoing token.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiContextRequirements">
            <summary>
            Bit flags that specify the attributes required by the server to establish the context. Bit flags can be combined by using bitwise-OR operations.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirements.Delegation">
            <summary>The server can use the context to authenticate to other servers as the client. Must be used with MutualAuthentication flag.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirements.MutualAuthentication">
            <summary>Mutual authentication.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirements.Confidentiality">
            <summary>Confidentiality.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirements.Connection">
            <summary>Connection.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiContextRequirements.Integrity">
            <summary>Integrity.</summary>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiDataRepresentation">
            <summary>
            The data representation, such as byte ordering, on the target.
            </summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiDataRepresentation.Native">
            <summary>Native.</summary>
        </member>
        <member name="F:ComponentPro.Security.Authentication.SspiDataRepresentation.Network">
            <summary>Network.</summary>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiException">
            <summary>
            Represents an SSPI error.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.Authentication.SspiAuthentication">
            <summary>
            Wrapper class for SSPI authentication.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.#ctor(System.String,ComponentPro.Security.Authentication.SspiDataRepresentation,System.String,ComponentPro.Security.Authentication.SspiContextRequirements,System.String,System.String,System.String)">
            <summary>
            Creates a new SSPI session.
            </summary>
            <param name="package">Authentication package.</param>
            <param name="dataRepresentation">Data representation.</param>
            <param name="targetName">Target name.</param>
            <param name="requirements">Requirements.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="userDomain">User domain</param>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.#ctor(System.String,ComponentPro.Security.Authentication.SspiCredentialUse,ComponentPro.Security.Authentication.SspiDataRepresentation,System.String,ComponentPro.Security.Authentication.SspiContextRequirements,System.String,System.String,System.String)">
            <summary>
            Creates a new SSPI session.
            </summary>
            <param name="package">Authentication package.</param>
            <param name="use">Credential use.</param>
            <param name="dataRepresentation">Data representation.</param>
            <param name="targetName">Target name.</param>
            <param name="requirements">Requirements.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="userDomain">User domain</param>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.Dispose">
            <summary>
            Disposes the SSPI session.
            </summary>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.GetNextMessage(System.Byte[],System.Boolean@)">
            <summary>
            Get next SSPI message.
            </summary>
            <param name="challenge">Challenge.</param>
            <param name="complete">Receives a value indicating whether the SSPI has finished.</param>
            <returns>Next SSPI message.</returns>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies an SSPI signature.
            </summary>
            <param name="message">Message.</param>
            <param name="signature">Signature.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.MakeSignature(System.Byte[])">
            <summary>
            Creates an SSPI signature.
            </summary>
            <param name="challenge">Challenge.</param>
            <returns>Signature.</returns>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.Unwrap(System.Byte[],System.Int32@)">
            <summary>
            Unwraps (decrypts) the SSPI message.
            </summary>
            <param name="challenge">Challenge.</param>
            <param name="qop">QOP</param>
            <returns>Unwrapped (decrypted) message.</returns>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.Wrap(System.Byte[],System.Int32,System.Boolean@)">
            <summary>
            Wraps (encryptes) SSPI message.
            </summary>
            <param name="response">Response.</param>
            <param name="qop">QOP.</param>
            <param name="complete">Receives a value indicating whether the SSPI has finished.</param>
            <returns>Wrapped (encrypted) message.</returns>
        </member>
        <member name="M:ComponentPro.Security.Authentication.SspiAuthentication.IsUsernameSuitableForSspi(System.String)">
            <summary>
            Checks if the specified username is suitable for SSPI authentication.
            </summary>
            <param name="username">The username to check.</param>
        </member>
        <member name="T:ComponentPro.Security.CertificateReceivedEventHandler">
            <summary>Represents that method that will handle the <b>CertificateReceived</b> event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateReceivedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Security.CertificateReceivedEventArgs">
            <summary>
            Provides information on the certificate that is received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.ServerCertificates">
            <summary>
            Gets the certificate received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.Status">
            <summary>
            Gets the verification status of the certificate received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.Accept">
            <summary>
            Gets or sets a boolean value indicating whether to accept <see cref="P:ComponentPro.Security.CertificateReceivedEventArgs.ServerCertificates">the certificated</see> received from the server.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.ErrorCode">
            <summary>
            Gets the verification error code.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateReceivedEventArgs.AddToTrustedRoot">
            <summary>
            Gets or sets a boolean value indicating whether to add this certificate to the trusted list.
            </summary>
        </member>
        <member name="T:ComponentPro.Security.CertificateRequiredEventHandler">
            <summary>Represents that method that will handle the <b>CertificateRequired</b> event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:ComponentPro.Security.CertificateRequiredEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ComponentPro.Security.CertificateRequiredEventArgs">
            <summary>
            Provides information on the certificate that the server requires from the client.
            </summary>
        </member>
        <member name="P:ComponentPro.Security.CertificateRequiredEventArgs.Certificates">
            <summary>
            Gets or sets the client's certificate that is required by the server, or null to try to search for the certificate in the store.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.SslConfig">
            <summary>
            Represents the SSL configuration.
            </summary>
        </member>
        <member name="M:ComponentPro.Net.SslConfig.GetSslConfig">
            <summary>
            Returns a shallow copy of the current parameters.
            </summary>
            <returns>A shallow copy of current parameters.</returns>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.AllowedTlsSslVersion">
            <summary>
            Gets or sets the allowed protocol versions.
            </summary>
            <value>Allowed protocol versions.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.AllowedTlsSslCipherSuites">
            <summary>
            Gets or sets the group of allowed cipher suites.
            </summary>
            <value>The group of allowed cipher suites.</value>
        </member>
        <member name="P:ComponentPro.Net.SslConfig.CommonName">
            <summary>
            Gets or sets the common name of the server.
            </summary>
            <value>The common name of the server.</value>
        </member>
        <member name="T:ComponentPro.Net.TlsSslProtocol">
            <summary>
            TLS/SSL protocol version.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.None">
            <summary>
            No SSL/TLS used.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.SSL30">
            <summary>
            SSL 3.0 protocol. Deprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.TLS10">
            <summary>
            TLS 1.0 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslProtocol.TLS11">
            <summary>
            TLS 1.1 protocol. Experimental.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslVersion">
            <summary>
            Defines the TLS/SSL protocol version flags.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.SSL30">
            <summary>
            SSL 3.0 protocol. Deprecated.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.TLS10">
            <summary>
            TLS 1.0 protocol.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.TLS11">
            <summary>
            TLS 1.1 protocol. Experimental.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslVersion.Any">
            <summary>
            Use any supported protocol
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslMacAlgorithm">
            <summary>
            Specifies the MAC algorithm in use.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslMacAlgorithm.None">
            <summary>
            No MAC algorithm in use.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslMacAlgorithm.MD5">
            <summary>
            MD5 algorithm.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslMacAlgorithm.SHA1">
            <summary>
            SHA1 algorithm.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsSslCipherSuite">
            <summary>
            Defines the cipher suites.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.None">
            <summary>
            No cipher suite.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT_WITH_RC4_40_MD5">
            <summary>
            Exportable 40bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_RC4_128_MD5">
            <summary>
            128bit RC4 with MD5 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_RC4_128_SHA">
            <summary>
            128bit RC4 with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT_WITH_RC2_CBC_40_MD5">
            <summary>
            Exportable 40bit RC2 in CBC mode with MD5 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT1024_WITH_DES_CBC_SHA">
            <summary>
            Exportable 56bit DES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_EXPORT1024_WITH_RC4_56_SHA">
            <summary>
            Exportable 56bit RC4 mode with SHA1 hash.
            </summary>
            <remarks>This cipher is not considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.RSA_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA">
            <summary>
            Exportable 56bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_EXPORT1024_WITH_RC4_56_SHA">
            <summary>
            Exportable 40bit RC4 with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_DSS_WITH_RC4_128_SHA">
            <summary>
            128bit RC4 with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_DES_CBC_SHA">
            <summary>
            56bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_3DES_EDE_CBC_SHA">
            <summary>
            TripleDES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_AES_128_CBC_SHA">
            <summary>
            128bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DHE_RSA_WITH_AES_256_CBC_SHA">
            <summary>
            256bit AES in CBC mode with SHA1 hash.
            </summary>
            <remarks>This cipher is currently considered secure.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_WITH_RC4_128_MD5">
            <summary>
            Anonymous 128bit RC4 with MD5 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_WITH_3DES_EDE_CBC_SHA">
            <summary>
            Anonymous TripleDES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_WITH_DES_CBC_SHA">
            <summary>
            Anonymous DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_EXPORT_WITH_RC4_40_MD5">
            <summary>
            Anonymous exportable 40bit RC4 with MD5 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.DH_anon_EXPORT_WITH_DES40_CBC_SHA">
            <summary>
            Anonymous exportable 40bit DES in CBC mode with SHA1 hash.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.Secure">
            <summary>
            Specifies all ciphers that are currently considered secure.
            </summary>
            <remarks>See <see cref="T:ComponentPro.Net.TlsSslCipherSuite"/> for the list.</remarks>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.Anonymous">
            <summary>
            Specifies anonymous ciphers.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsSslCipherSuite.All">
            <summary>
            Specifies all ciphers, including the weak ciphers, excluding anonymous ciphers.
            </summary>
        </member>
        <member name="T:ComponentPro.Net.TlsCertificateAcceptance">
            <summary>
            Specifies certificate acceptance values.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.Accept">
            <summary>
            A certificate is to be accepted.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.CommonNameMismatch">
            <summary>
            The certificate common name does not match the server's name.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.RevocationCheckFailed">
            <summary>
            Unable to perform revocation check of the server certificate.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.Bad">
            <summary>
            A certificate is corrupt, contains signatures that do not verify correctly, etc.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.Unsupported">
            <summary>
            A certificate is of an unsupported type.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.Revoked">
            <summary>
            A certificate was revoked by its signer.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.Expired">
            <summary>
            A certificate has expired or is not currently valid.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.UnknownAuthority">
            <summary>
            A CA certificate could not be found or untrusted CA.
            </summary>
        </member>
        <member name="F:ComponentPro.Net.TlsCertificateAcceptance.Other">
            <summary>
            Some other issue arose in processing the certificate, rendering it unacceptable.
            </summary>
        </member>
    </members>
</doc>
